// <auto-generated />
using System;
using ETicket.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ETicket.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ETicket.Models.Cities", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("CountryId");

                    b.HasKey("CityId");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("ETicket.Models.Countries", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("CountryId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("ETicket.Models.Deliveries", b =>
                {
                    b.Property<int>("DeliveryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DeliveryType")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(9, 2)");

                    b.HasKey("DeliveryId");

                    b.ToTable("Deliveries");
                });

            modelBuilder.Entity("ETicket.Models.Events", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EventDescription")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("EventEnd")
                        .HasColumnType("datetime");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("EventStart")
                        .HasColumnType("datetime");

                    b.Property<int>("EventTicketPurchaseLimit");

                    b.Property<int>("PlaceId");

                    b.Property<int?>("TourId");

                    b.HasKey("EventId");

                    b.HasIndex("PlaceId");

                    b.HasIndex("TourId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("ETicket.Models.PerformerCategories", b =>
                {
                    b.Property<int>("PerformerCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PerformerCategoryName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("PerformerCategoryId");

                    b.ToTable("PerformerCategories");
                });

            modelBuilder.Entity("ETicket.Models.Performers", b =>
                {
                    b.Property<int>("PerformerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PerformerCategoryId");

                    b.Property<string>("PerformerName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("PerformerId");

                    b.HasIndex("PerformerCategoryId");

                    b.ToTable("Performers");
                });

            modelBuilder.Entity("ETicket.Models.PhotoEvents", b =>
                {
                    b.Property<int>("PhotoEventId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EventId");

                    b.Property<bool>("PhotoEventDefault");

                    b.Property<int>("PhotoId");

                    b.HasKey("PhotoEventId");

                    b.HasIndex("EventId");

                    b.HasIndex("PhotoId");

                    b.ToTable("PhotoEvents");
                });

            modelBuilder.Entity("ETicket.Models.Photos", b =>
                {
                    b.Property<int>("PhotoId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.HasKey("PhotoId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("ETicket.Models.Places", b =>
                {
                    b.Property<int>("PlaceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId");

                    b.Property<string>("PlaceAddress")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("PlaceCapacity");

                    b.Property<string>("PlaceDescription")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("PlaceName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("PlaceId");

                    b.HasIndex("CityId");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("ETicket.Models.Purchases", b =>
                {
                    b.Property<int>("PurchaseId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DeliveryId");

                    b.Property<string>("Id");

                    b.Property<int>("PurchaseAmount");

                    b.Property<DateTime>("PurchaseTicketDate")
                        .HasColumnType("datetime");

                    b.Property<int>("TicketId");

                    b.HasKey("PurchaseId");

                    b.HasIndex("DeliveryId");

                    b.HasIndex("Id");

                    b.HasIndex("TicketId");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("ETicket.Models.Tickets", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EventId");

                    b.Property<int>("TicketAvailability");

                    b.Property<string>("TicketDescription")
                        .HasMaxLength(500);

                    b.Property<string>("TicketName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<decimal>("TicketPrice")
                        .HasColumnType("decimal(9, 2)");

                    b.HasKey("TicketId");

                    b.HasIndex("EventId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("ETicket.Models.Tours", b =>
                {
                    b.Property<int>("TourId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PerformerId");

                    b.Property<string>("TourDescription")
                        .HasMaxLength(500);

                    b.Property<string>("TourName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("TourId");

                    b.HasIndex("PerformerId");

                    b.ToTable("Tours");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ETicket.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int>("CountryId");

                    b.Property<string>("UserAddress")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UserBirthdate")
                        .HasColumnType("date");

                    b.Property<string>("UserCity")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("UserCreated")
                        .HasColumnType("datetime");

                    b.Property<string>("UserFirstname")
                        .HasMaxLength(50);

                    b.Property<DateTime>("UserLastLog")
                        .HasColumnType("datetime");

                    b.Property<string>("UserPhone")
                        .HasMaxLength(20);

                    b.Property<string>("UserSex")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("UserSurname")
                        .HasMaxLength(50);

                    b.HasIndex("CountryId");

                    b.ToTable("ApplicationUser");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("ETicket.Models.Cities", b =>
                {
                    b.HasOne("ETicket.Models.Countries", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_Cities_ToCountries");
                });

            modelBuilder.Entity("ETicket.Models.Events", b =>
                {
                    b.HasOne("ETicket.Models.Places", "Place")
                        .WithMany("Events")
                        .HasForeignKey("PlaceId")
                        .HasConstraintName("FK_Events_ToPlaces");

                    b.HasOne("ETicket.Models.Tours", "Tour")
                        .WithMany("Events")
                        .HasForeignKey("TourId")
                        .HasConstraintName("FK_Events_ToTours");
                });

            modelBuilder.Entity("ETicket.Models.Performers", b =>
                {
                    b.HasOne("ETicket.Models.PerformerCategories", "PerformerCategory")
                        .WithMany("Performers")
                        .HasForeignKey("PerformerCategoryId")
                        .HasConstraintName("FK_Performers_ToPerformerCategories");
                });

            modelBuilder.Entity("ETicket.Models.PhotoEvents", b =>
                {
                    b.HasOne("ETicket.Models.Events", "Event")
                        .WithMany("PhotoEvents")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_PhotoEvents_ToEvents");

                    b.HasOne("ETicket.Models.Photos", "Photo")
                        .WithMany("PhotoEvents")
                        .HasForeignKey("PhotoId")
                        .HasConstraintName("FK_PhotoEvents_ToPhotos");
                });

            modelBuilder.Entity("ETicket.Models.Places", b =>
                {
                    b.HasOne("ETicket.Models.Cities", "City")
                        .WithMany("Places")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_Places_ToCities");
                });

            modelBuilder.Entity("ETicket.Models.Purchases", b =>
                {
                    b.HasOne("ETicket.Models.Deliveries", "Delivery")
                        .WithMany("Purchases")
                        .HasForeignKey("DeliveryId")
                        .HasConstraintName("FK_Purchases_ToDeliveries");

                    b.HasOne("ETicket.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Purchases")
                        .HasForeignKey("Id")
                        .HasConstraintName("FK_Purchases_ToApplicationUsers");

                    b.HasOne("ETicket.Models.Tickets", "Ticket")
                        .WithMany("Purchases")
                        .HasForeignKey("TicketId")
                        .HasConstraintName("FK_Purchases_ToTickets");
                });

            modelBuilder.Entity("ETicket.Models.Tickets", b =>
                {
                    b.HasOne("ETicket.Models.Events", "Event")
                        .WithMany("Tickets")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_Tickets_ToEvents");
                });

            modelBuilder.Entity("ETicket.Models.Tours", b =>
                {
                    b.HasOne("ETicket.Models.Performers", "Performer")
                        .WithMany("Tours")
                        .HasForeignKey("PerformerId")
                        .HasConstraintName("FK_Tours_ToPerformers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ETicket.Models.ApplicationUser", b =>
                {
                    b.HasOne("ETicket.Models.Countries", "Country")
                        .WithMany("Users")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_Users_ToCountries");
                });
#pragma warning restore 612, 618
        }
    }
}
